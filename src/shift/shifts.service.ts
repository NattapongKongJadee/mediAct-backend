// src/shifts/shifts.service.ts
import { BadRequestException, Injectable } from '@nestjs/common';
import { PrismaService } from 'prisma/prisma.service';
import * as dayjs from 'dayjs';

@Injectable()
export class ShiftsService {
  constructor(private prisma: PrismaService) {}
  async create(
    dto: { date: string; startTime: string; endTime: string },
    createdById: number,
  ) {
    // ‡πÉ‡∏ä‡πâ Date ‡∏•‡πâ‡∏ß‡∏ô ‡πÜ
    const date = new Date(dto.date);
    const startTime = new Date(dto.startTime);
    let endTime = new Date(dto.endTime);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö (Date invalid ‡∏à‡∏∞‡πÉ‡∏´‡πâ NaN)
    if ([date, startTime, endTime].some((d) => isNaN(d.getTime()))) {
      throw new BadRequestException('‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô/‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }

    // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏∞‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô: ‡∏ñ‡πâ‡∏≤ end <= start ‡πÉ‡∏´‡πâ‡∏ö‡∏ß‡∏Å 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÉ‡∏´‡πâ end
    if (endTime.getTime() <= startTime.getTime()) {
      endTime = new Date(endTime.getTime() + 24 * 60 * 60 * 1000);
    }

    try {
      const shift = await this.prisma.shift.create({
        data: {
          date, // ‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤
          startTime,
          endTime,
          createdBy: { connect: { id: createdById } },
        },
        include: { createdBy: { select: { id: true, name: true } } },
      });

      // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ (format ‡∏î‡πâ‡∏ß‡∏¢ dayjs ‡πÑ‡∏î‡πâ)
      return {
        success: true,
        data: {
          id: shift.id,
          createdBy: shift.createdBy,
          iso: {
            date: shift.date,
            startTime: shift.startTime,
            endTime: shift.endTime,
          },
          label: {
            date: dayjs(shift.date).format('DD-MM-YYYY'),
            start: dayjs(shift.startTime).format('HH:mm:ss'),
            end: dayjs(shift.endTime).format('HH:mm:ss'),
          },
        },
      };
    } catch (e: any) {
      if (e?.code === 'P2002') {
        return { success: false, message: '‡πÄ‡∏ß‡∏£‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß' };
      }
      throw e;
    }
  }

  // shifts.service.ts
  // shifts.service.ts
  async list() {
    const shifts = await this.prisma.shift.findMany({
      orderBy: [{ date: 'asc' }, { startTime: 'asc' }],
      select: {
        id: true,
        date: true,
        startTime: true,
        endTime: true,
        createdBy: { select: { id: true, name: true } },
        assignments: {
          where: { isActive: true }, // üëà ‡∏ô‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ active
          include: {
            user: { select: { id: true, name: true, email: true } },
            leaves: {
              orderBy: { createdAt: 'desc' },
              take: 1,
              select: { status: true },
            },
          },
        },
      },
    });

    return shifts.map((s) => {
      // ‡∏à‡∏∞‡∏°‡∏µ 0 ‡∏´‡∏£‡∏∑‡∏≠ 1 ‡πÅ‡∏ñ‡∏ß (‡∏ï‡∏≤‡∏°‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢ 1 ‡πÄ‡∏ß‡∏£ = 1 active)
      const a = s.assignments[0] ?? null;
      const assignedNurse = a?.user ?? null;

      return {
        id: s.id,
        date: s.date,
        startTime: s.startTime,
        endTime: s.endTime,
        createdBy: s.createdBy,
        assignmentsCount: assignedNurse ? 1 : 0,
        assignedNurse,
        canAssign: !assignedNurse,
      };
    });
  }
}
